
# IMPORTS #######################################

# plotting
#import matplotlib.pyplot as plt
import pandas as pd
import eurostat
import geopandas as gpd
from shapely.geometry import LineString
import country_converter as coco
import matplotlib.pyplot as plt
import os
cm = 1/2.54  # for inches-cm conversion


my_filter_pars = {'startPeriod': 2019, 'endPeriod': 2019, 'unit': 'FLIGHT', 'tra_meas': 'CAF_PAS', 'freq': 'A'}
data_de = eurostat.get_data_df('avia_par_de', filter_pars=my_filter_pars)
data_fr = eurostat.get_data_df('avia_par_fr', filter_pars=my_filter_pars)
data_uk = eurostat.get_data_df('avia_par_uk', filter_pars=my_filter_pars)
data_be = eurostat.get_data_df('avia_par_be', filter_pars=my_filter_pars)
data_bg = eurostat.get_data_df('avia_par_bg', filter_pars=my_filter_pars)
# data_cz = eurostat.get_data_df('avia_par_cz', filter_pars=my_filter_pars) -> no details on landing airports
data_dk = eurostat.get_data_df('avia_par_dk', filter_pars=my_filter_pars)
data_ee = eurostat.get_data_df('avia_par_ee', filter_pars=my_filter_pars)
data_ie = eurostat.get_data_df('avia_par_ie', filter_pars=my_filter_pars)
data_el = eurostat.get_data_df('avia_par_el', filter_pars=my_filter_pars)
data_es = eurostat.get_data_df('avia_par_es', filter_pars=my_filter_pars)
data_hr = eurostat.get_data_df('avia_par_hr', filter_pars=my_filter_pars)
data_it = eurostat.get_data_df('avia_par_it', filter_pars=my_filter_pars)
data_cy = eurostat.get_data_df('avia_par_cy', filter_pars=my_filter_pars)
data_lv = eurostat.get_data_df('avia_par_lv', filter_pars=my_filter_pars)
data_lt = eurostat.get_data_df('avia_par_lt', filter_pars=my_filter_pars)
data_lu = eurostat.get_data_df('avia_par_lu', filter_pars=my_filter_pars)
data_hu = eurostat.get_data_df('avia_par_hu', filter_pars=my_filter_pars)
data_mt = eurostat.get_data_df('avia_par_mt', filter_pars=my_filter_pars)
data_nl = eurostat.get_data_df('avia_par_nl', filter_pars=my_filter_pars)
data_at = eurostat.get_data_df('avia_par_at', filter_pars=my_filter_pars)
data_pl = eurostat.get_data_df('avia_par_pl', filter_pars=my_filter_pars)
data_pt = eurostat.get_data_df('avia_par_pt', filter_pars=my_filter_pars)
data_ro = eurostat.get_data_df('avia_par_ro', filter_pars=my_filter_pars)
data_si = eurostat.get_data_df('avia_par_si', filter_pars=my_filter_pars)
data_sk = eurostat.get_data_df('avia_par_sk', filter_pars=my_filter_pars)
data_is = eurostat.get_data_df('avia_par_is', filter_pars=my_filter_pars)
data_no = eurostat.get_data_df('avia_par_no', filter_pars=my_filter_pars)
data_ch = eurostat.get_data_df('avia_par_ch', filter_pars=my_filter_pars)
#data_ba = eurostat.get_data_df('avia_par_ba', filter_pars=my_filter_pars) -> no data for 2019
data_me = eurostat.get_data_df('avia_par_me', filter_pars=my_filter_pars)
data_mk = eurostat.get_data_df('avia_par_mk', filter_pars=my_filter_pars)
data_tr = eurostat.get_data_df('avia_par_tr', filter_pars=my_filter_pars)
data_rs = eurostat.get_data_df('avia_par_rs', filter_pars=my_filter_pars)

# https://github.com/ip2location/ip2location-iata-icao?tab=readme-ov-file
# Lese die CSV-Datei in ein Pandas DataFrame ein und wähle nur die ausgewählten Spalten aus
airports_df = pd.read_csv(
    filepath_or_buffer='/Users/barend/Desktop/Thesis/demandmap/figures/worldmap/iata-icao.csv',
    sep=',',  # Trennzeichen im CSV
    header='infer',
    index_col=False,
)


airports_geodf = gpd.GeoDataFrame(
        airports_df,
        geometry=gpd.points_from_xy(
            x=airports_df["longitude"],
            y=airports_df["latitude"],
            # Specify the coordinate reference system (standard for lat/lon)
            crs='EPSG:4326'
        )
    )


def create_geo_dataframe(data, airports_geodf):
    # Leere Listen für die Speicherung der Liniengeometrien und der entsprechenden Daten
    geometries = []
    names = []
    flights = []

    # Iteration über die Zeilen des DataFrame
    for airport_connections, name, flight in zip(data['airp_pr\TIME_PERIOD'], data['airp_pr\TIME_PERIOD'], data['2019']):
        takeoff = airport_connections[3:7]
        landing = airport_connections[11:]

        # Überprüfe, ob takeoff und landing in der Spalte 'icao' des GeoDataFrames vorhanden sind
        if takeoff in airports_geodf['icao'].values and landing in airports_geodf['icao'].values:
            # Index des Startflughafens
            takeoff_index = airports_geodf[airports_geodf['icao'] == takeoff].index[0]
            # Index des Zielflughafens
            landing_index = airports_geodf[airports_geodf['icao'] == landing].index[0]
            # Liniengeometrie zwischen den Flughäfen erstellen
            takeoff_geometry = airports_geodf.at[takeoff_index, 'geometry']
            landing_geometry = airports_geodf.at[landing_index, 'geometry']
            line_geometry = LineString([takeoff_geometry, landing_geometry])

            # Füge die Liniengeometrie und die entsprechenden Daten zur Liste hinzu
            geometries.append(line_geometry)
            names.append(name)
            flights.append(flight)

    # Erstellen der GeoDataFrame mit Namen, Anzahl der Flüge und geometrischen Linien
    gdf = gpd.GeoDataFrame({'name': names, 'flights': flights, 'geometry': geometries}, crs='EPSG:4326')
    
    return gdf

# Beispielaufruf der Funktion mit einem anderen DataFrame data_de
gdf_de = create_geo_dataframe(data_de, airports_geodf)
gdf_fr = create_geo_dataframe(data_fr, airports_geodf)
gdf_uk = create_geo_dataframe(data_uk, airports_geodf)
gdf_be = create_geo_dataframe(data_be, airports_geodf)
gdf_bg = create_geo_dataframe(data_bg, airports_geodf)
gdf_dk = create_geo_dataframe(data_dk, airports_geodf)
gdf_ee = create_geo_dataframe(data_ee, airports_geodf)
gdf_ie = create_geo_dataframe(data_ie, airports_geodf)
gdf_el = create_geo_dataframe(data_el, airports_geodf)
gdf_es = create_geo_dataframe(data_es, airports_geodf)
gdf_hr = create_geo_dataframe(data_hr, airports_geodf)
gdf_it = create_geo_dataframe(data_it, airports_geodf)
gdf_cy = create_geo_dataframe(data_cy, airports_geodf)
gdf_lv = create_geo_dataframe(data_lv, airports_geodf)
gdf_lt = create_geo_dataframe(data_lt, airports_geodf)
gdf_lu = create_geo_dataframe(data_lu, airports_geodf)
gdf_hu = create_geo_dataframe(data_hu, airports_geodf)
gdf_mt = create_geo_dataframe(data_mt, airports_geodf)
gdf_nl = create_geo_dataframe(data_nl, airports_geodf)
gdf_at = create_geo_dataframe(data_at, airports_geodf)
gdf_pl = create_geo_dataframe(data_pl, airports_geodf)
gdf_pt = create_geo_dataframe(data_pt, airports_geodf)
gdf_ro = create_geo_dataframe(data_ro, airports_geodf)
gdf_si = create_geo_dataframe(data_si, airports_geodf)
gdf_sk = create_geo_dataframe(data_sk, airports_geodf)
gdf_is = create_geo_dataframe(data_is, airports_geodf)
gdf_no = create_geo_dataframe(data_no, airports_geodf)
gdf_ch = create_geo_dataframe(data_ch, airports_geodf)
gdf_me = create_geo_dataframe(data_me, airports_geodf)
gdf_mk = create_geo_dataframe(data_mk, airports_geodf)
gdf_tr = create_geo_dataframe(data_tr, airports_geodf)
gdf_rs = create_geo_dataframe(data_rs, airports_geodf)

# Anzeigen der erstellten GeoDataFrame
data_dir = "/Users/barend/Desktop/Thesis/demandmap/figures/worldmap/"
path_countries = data_dir + "ne_10m_admin_0_countries/ne_10m_admin_0_countries.shp"
countries = gpd.read_file(path_countries)
path_graticules = data_dir + "ne_50m_graticules_10/ne_50m_graticules_10.shp"
graticules = gpd.read_file(path_graticules)


# set coordinate reference system (crs) depening on map
# https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoDataFrame.set_crs.html
target_projection = "EPSG:3035"
# 3035 seems to work well for Europe

# change Data to adjusted crs
# https://automating-gis-processes.github.io/CSC/notebooks/L2/projections.html
countries = countries.to_crs(target_projection)
graticules = graticules.to_crs(target_projection)
geodf_airports_de = gdf_de.to_crs(target_projection)
geodf_airports_fr = gdf_fr.to_crs(target_projection)
geodf_airports_uk = gdf_uk.to_crs(target_projection)
geodf_airports_be = gdf_be.to_crs(target_projection)
geodf_airports_bg = gdf_bg.to_crs(target_projection)
geodf_airports_dk = gdf_dk.to_crs(target_projection)
geodf_airports_ee = gdf_ee.to_crs(target_projection)
geodf_airports_ie = gdf_ie.to_crs(target_projection)
geodf_airports_el = gdf_el.to_crs(target_projection)
geodf_airports_es = gdf_es.to_crs(target_projection)
geodf_airports_hr = gdf_hr.to_crs(target_projection)
geodf_airports_it = gdf_it.to_crs(target_projection)
geodf_airports_cy = gdf_cy.to_crs(target_projection)
geodf_airports_lv = gdf_lv.to_crs(target_projection)
geodf_airports_lt = gdf_lt.to_crs(target_projection)
geodf_airports_lu = gdf_lu.to_crs(target_projection)
geodf_airports_hu = gdf_hu.to_crs(target_projection)
geodf_airports_mt = gdf_mt.to_crs(target_projection)
geodf_airports_nl = gdf_nl.to_crs(target_projection)
geodf_airports_at = gdf_at.to_crs(target_projection)
geodf_airports_pl = gdf_pl.to_crs(target_projection)
geodf_airports_pt = gdf_pt.to_crs(target_projection)
geodf_airports_ro = gdf_ro.to_crs(target_projection)
geodf_airports_si = gdf_si.to_crs(target_projection)
geodf_airports_sk = gdf_sk.to_crs(target_projection)
geodf_airports_is = gdf_is.to_crs(target_projection)
geodf_airports_no = gdf_no.to_crs(target_projection)
geodf_airports_ch = gdf_ch.to_crs(target_projection)
geodf_airports_me = gdf_me.to_crs(target_projection)
geodf_airports_mk = gdf_mk.to_crs(target_projection)
geodf_airports_tr = gdf_tr.to_crs(target_projection)
geodf_airports_rs = gdf_rs.to_crs(target_projection)


# represent the lower-left and upper-right corners of a bounding box on a map (showing only part of whole map)
# https://geopandas.org/en/stable/docs/reference/api/geopandas.points_from_xy.html#geopandas-points-from-xy

lower_left = gpd.points_from_xy(
    x=[-10],  # longitude
    y=[33],  # latitude
    crs='EPSG:4326'  # = World Geodetic System WGS 84, defines an Earth-centered, Earth-fixed coordinate system
).to_crs(target_projection)

upper_right = gpd.points_from_xy(
    x=[60],  # longitude
    y=[60],  # latitude
    crs='EPSG:4326'  # = WGS 84
).to_crs(target_projection)


######################################################
# Plot ###############################################
######################################################

# Set up Plot ###############

fig, ax = plt.subplots(
    num='main',
    nrows=1,  # only 1 plot
    ncols=1,  # only 1 plot
    dpi=300,  # resolution of the figure
    figsize=(18*cm, 18*cm),  # A4=(210x297)mm,
)

countries.plot(
    ax=ax,
    color='white',
    edgecolor='black',
    linewidth=0.25,
    alpha=1,  # transparency of the polygons
)

# AXIS LIMITS ################

ax.set_xlim(
    lower_left.x[0],
    upper_right.x[0]
)

ax.set_ylim(
    lower_left.y[0],
    upper_right.y[0]
)

# GRIDS ######################

graticules.plot(
    ax=ax,
    color='grey',
    linewidth=0.5,
    linestyle='--',
    alpha=0.5,
)


# Countries colour ####################

# https://github.com/IndEcol/country_converter?tab=readme-ov-file#classification-schemes

cc = coco.CountryConverter()

for country in countries.itertuples():
    if country.CONTINENT == 'Europe':
        # Convert the geometry to a GeoSeries
        country_geo = gpd.GeoSeries(country.geometry)
        # Plot the country with light blue color if it's in Europe
        country_geo.plot(
            ax=ax,
            facecolor='darkblue',
            edgecolor='black',
            linewidth=1)
    else:
        country_geo = gpd.GeoSeries(country.geometry)  # Convert the geometry to a GeoSeries
        country_geo.plot(
            ax=ax,
            facecolor='darkgreen',
            edgecolor='black',
            linewidth=1
        )





def plot_airports(ax, geodf, color='red'):
    geodf.plot(
        ax=ax,
        marker='-',
        color=color,
        markersize=geodf['flights'] / 150000,
        alpha=geodf['flights'] / 70000
    )

# Beispielaufrufe der Funktion für die verschiedenen GeoDataFrames
plot_airports(ax, geodf_airports_de)
plot_airports(ax, geodf_airports_fr)
plot_airports(ax, geodf_airports_uk)
plot_airports(ax, geodf_airports_be)
plot_airports(ax, geodf_airports_bg)
plot_airports(ax, geodf_airports_dk)
plot_airports(ax, geodf_airports_ee)
plot_airports(ax, geodf_airports_ie)
plot_airports(ax, geodf_airports_el)
plot_airports(ax, geodf_airports_es)
plot_airports(ax, geodf_airports_hr)
plot_airports(ax, geodf_airports_it)
plot_airports(ax, geodf_airports_cy)
plot_airports(ax, geodf_airports_lv)
plot_airports(ax, geodf_airports_lt)
plot_airports(ax, geodf_airports_lu)
plot_airports(ax, geodf_airports_hu)
plot_airports(ax, geodf_airports_mt)
plot_airports(ax, geodf_airports_nl)
plot_airports(ax, geodf_airports_at)
plot_airports(ax, geodf_airports_pl)
plot_airports(ax, geodf_airports_pt)
plot_airports(ax, geodf_airports_ro)
plot_airports(ax, geodf_airports_si)
plot_airports(ax, geodf_airports_sk)
plot_airports(ax, geodf_airports_is)
plot_airports(ax, geodf_airports_no)
plot_airports(ax, geodf_airports_ch)
plot_airports(ax, geodf_airports_me)
plot_airports(ax, geodf_airports_mk)
plot_airports(ax, geodf_airports_tr)
plot_airports(ax, geodf_airports_rs)

######################################################
# EXPORT #############################################
######################################################


file_path = os.path.abspath(__file__)
file_name = os.path.splitext(os.path.basename(file_path))[0]
figure_name: str = str(file_name + '.pdf')

plt.savefig(
    fname=figure_name,
    format="pdf",
    bbox_inches='tight',
    transparent=False
)